import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;

public class PokeBattle {
  static BattleFrame bFrame;
  static Battle fight;
  static ItemDialog iDialog;
  static SwitchDialog sDialog;
  
  public static void main(String[] args) {
	fight = new Battle();
    EventQueue.invokeLater(new Runnable() {
	  public void run() {
        bFrame = new BattleFrame();
		bFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		bFrame.setVisible(true);
      }	  
	});
  }

}


//--------------------------------------------------------------------------------------------------------

class BattleFrame extends javax.swing.JFrame {
    // Variables declaration
    private javax.swing.JButton moveButton1;
    private javax.swing.JButton moveButton2;
    private javax.swing.JButton moveButton3;
    private javax.swing.JButton moveButton4;
    private javax.swing.JButton okButton;
    private javax.swing.JButton itemButton;
	private javax.swing.JButton runButton;
    private javax.swing.JButton switchButton;
	private BattlePanel panel;
    // End of variables declaration
	
	//constructor method
    public BattleFrame() {
        initComponents();
    }

    private void initComponents() {
        setTitle("Pokemon Java: Battle Scene");
		panel = new BattlePanel();
		panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createRaisedBevelBorder(), BorderFactory.createLoweredBevelBorder()));
		panel.setBackground(new Color(198, 223, 208));
		this.add(panel);
        moveButton1 = new javax.swing.JButton();
        moveButton2 = new javax.swing.JButton();
        moveButton3 = new javax.swing.JButton();
        moveButton4 = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        itemButton = new javax.swing.JButton();
		runButton = new javax.swing.JButton();
        switchButton = new javax.swing.JButton();

		//sets the button names for the opening pokemon
		String text1 = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move1.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move1.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move1.maxPP + "</html>";
        moveButton1.setText(text1);
		if (PokeBattle.fight.you.team.get(Battle.myIndex).move1.currentPP == 0) {
		  moveButton1.setEnabled(false);
		}
		else {
		  moveButton1.setEnabled(true);
		}
		String text2 = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move2.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move2.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move2.maxPP + "</html>";
        moveButton2.setText(text2);
		if (PokeBattle.fight.you.team.get(Battle.myIndex).move2.currentPP == 0) {
		  moveButton2.setEnabled(false);
		}
		else {
		  moveButton2.setEnabled(true);
		}
		String text3 = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move3.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move3.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move3.maxPP + "</html>";
        moveButton3.setText(text3);
		if (PokeBattle.fight.you.team.get(Battle.myIndex).move3.currentPP == 0) {
		  moveButton3.setEnabled(false);
		}
		else {
		  moveButton3.setEnabled(true);
		}
		String text4 = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move4.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move4.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move4.maxPP + "</html>";
        moveButton4.setText(text4);
		if (PokeBattle.fight.you.team.get(Battle.myIndex).move4.currentPP == 0) {
		  moveButton4.setEnabled(false);
		}
		else {
		  moveButton4.setEnabled(true);
		}
		
        okButton.setText("Ok!");
        itemButton.setText("Bag");
		runButton.setText("Run");
        switchButton.setText("Pokemon");
		
        //create button actions
	    ChoiceAction m1Action = new ChoiceAction(0);
	    ChoiceAction m2Action = new ChoiceAction(1);
	    ChoiceAction m3Action = new ChoiceAction(2);
	    ChoiceAction m4Action = new ChoiceAction(3);
	    ChoiceAction okAction = new ChoiceAction(4);
	    ChoiceAction itemAction = new ChoiceAction(5);
		ChoiceAction switchAction = new ChoiceAction(6);
		ChoiceAction runAction = new ChoiceAction(7);

	
	    //associate actions with buttons
	    okButton.addActionListener(okAction);
	    moveButton1.addActionListener(m1Action);
	    moveButton2.addActionListener(m2Action);
	    moveButton3.addActionListener(m3Action);
	    moveButton4.addActionListener(m4Action);
	    itemButton.addActionListener(itemAction);
		switchButton.addActionListener(switchAction);
		runButton.addActionListener(runAction);
		
  
        //bunch of code generated by netbeans that positions things

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(moveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(moveButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(itemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(switchButton)
                    .addComponent(runButton))
                .addGap(20, 20, 20))
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {itemButton, okButton, runButton, switchButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveButton1, moveButton2, moveButton3, moveButton4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(moveButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(itemButton, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                        .addComponent(switchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moveButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(moveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {itemButton, okButton, runButton, switchButton});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {moveButton1, moveButton2, moveButton3, moveButton4});


        pack();
    }
	
        //sets the button text to the current pokemon's moves
        void setButtonText() {
		  String m1text = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move1.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move1.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move1.maxPP + "</html>";
          moveButton1.setText(m1text);
		  if (PokeBattle.fight.you.team.get(Battle.myIndex).move1.currentPP == 0) {
		  moveButton1.setEnabled(false);
		  }
		  else {
		    moveButton1.setEnabled(true);
		  }
		  String m2text = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move2.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move2.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move2.maxPP + "</html>";
          moveButton2.setText(m2text);
		  if (PokeBattle.fight.you.team.get(Battle.myIndex).move2.currentPP == 0) {
		    moveButton2.setEnabled(false);
		  }
		  else {
		    moveButton2.setEnabled(true);
		  }
		  String m3text = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move3.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move3.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move3.maxPP + "</html>";
          moveButton3.setText(m3text);
		  if (PokeBattle.fight.you.team.get(Battle.myIndex).move3.currentPP == 0) {
		    moveButton3.setEnabled(false);
		  }
		  else {
		    moveButton3.setEnabled(true);
		  }
		  String m4text = "<html>" + PokeBattle.fight.you.team.get(Battle.myIndex).move4.name + "<br>PP: " + PokeBattle.fight.you.team.get(Battle.myIndex).move4.currentPP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).move4.maxPP + "</html>";
          moveButton4.setText(m4text);
		  if (PokeBattle.fight.you.team.get(Battle.myIndex).move4.currentPP == 0) {
		    moveButton4.setEnabled(false);
		  }
		  else {
		    moveButton4.setEnabled(true);
		  }
        }
		
  /**
  * An action listener that causes the game to run
  */
  private class ChoiceAction implements ActionListener {
	private int choice;
	
    public ChoiceAction(int j) {
	  choice = j;
	}
	
	public void actionPerformed(ActionEvent event) {
      Battle.selection = choice;
	  if (PokeBattle.fight.over) {
	    //do nothing, the game is over
	  }
	  else {
	    if (PokeBattle.fight.okay) { //means user has to press ok to continue
		  if (choice == 4) { //means user has pressed ok
		    //continue doing work
			  PokeBattle.fight.enemyAttack();
			  PokeBattle.fight.okay = false;
		  }
		  else {
		   //do nothing. wait until they hit ok
		  }
	    }
	    else { //means it is time for the user to pick an action
	      if (choice == 4) {  //means user picked ok
		    //do nothing. wait til they pick an attack
		  }
		  else if (choice == 5) { //chose "Item"
		    BattlePanel.line1 = "Items haven't been fully implemented yet.";
			BattlePanel.line2 = "";
			BattlePanel.line3 = "Pick a move, use an item, or switch Pokemon.";
			PokeBattle.iDialog = new ItemDialog(PokeBattle.bFrame, true);
			PokeBattle.iDialog.setVisible(true);
		  }
		  else if (choice == 6) { //chose "Switch"
		    //BattlePanel.line1 = "You hit the switch button!";
			//BattlePanel.line2 = "That means you either switched, or hit back.";
			//BattlePanel.line3 = "Pick a move, use an item, or switch Pokemon.";
			PokeBattle.sDialog = new SwitchDialog(PokeBattle.bFrame, true);
			PokeBattle.sDialog.setVisible(true);
		   }
		  else if (choice == 7) { //chose "run"
		    BattlePanel.line1 = "You can't run from a trainer battle.";
			BattlePanel.line2 = "Don't be such a pussy.";
			BattlePanel.line3 = "Pick a move, use an item, or switch Pokemon.";
		  }
		  else { //picked a move
		    PokeBattle.fight.userAttack();
		    PokeBattle.fight.okay = true;
		  }
	    }
	    setButtonText();
	    repaint();
	  }
	}
  }
}

//--------------------------------------------------------------------------------------------------------

//BattlePanel does all of the graphics in BattleFrame
class BattlePanel extends JPanel{
  static String line1 = "It's a battle between you and Gary!";
  static String line2 = "";
  static String line3 = "";
  Image pokeball = Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/pokeballicon.png"));
  Image darkball = Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/pokeballdark.png"));
  Image grass = Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/grass.png"));
  Color gray = new Color(228, 236, 242);
  Color green = new Color(46, 139, 87);
  Color yellow = new Color(255, 215, 0);
  Color red = new Color(255, 69, 0);
  Color blue = new Color(17, 128, 213);
  
// Create a constructor method
  public BattlePanel(){
   super();
  }
  
  void setLine1(String text) {
    line1 = text;
  }
  
  static void setLine2(String text) {
    line2 = text;
  }
  
  static void setLine3(String text) {
    line3 = text;
  }
  
  static void setLines(String text1, String text2, String text3) {
    line1 = text1;
	line2 = text2;
	line3 = text3;
  }

//Create a paintComponent() method to override the one in JPanel.
  public void paintComponent(Graphics g){
    super.paintComponent(g);
	
	//draw user's pokemon name/health bar/exp bar/etc.
	g.setColor(gray);
	g.fillRoundRect(163, 120, 150, 50, 5, 5);
	g.setColor(Color.BLACK);
	g.drawRoundRect(163, 120, 150, 50, 5, 5);
    g.drawString(PokeBattle.fight.you.team.get(Battle.myIndex).species, 168, 132);
	g.drawString("Lv: " + PokeBattle.fight.you.team.get(Battle.myIndex).level, 270, 132);
	int myHealth = (int)((PokeBattle.fight.you.team.get(Battle.myIndex).currentHP * 100) / PokeBattle.fight.you.team.get(Battle.myIndex).maxHP);
	if (myHealth > 50) {
	  g.setColor(green);
	}
	else if (myHealth > 20) {
	  g.setColor(yellow);
	}
	else {
	  g.setColor(red);
	}
	g.drawRoundRect(203, 140, 100, 10, 5, 5); //your health bar
	g.fillRoundRect(203, 140, myHealth, 10, 5, 5);
	g.setColor(Color.BLACK);
	g.drawString(PokeBattle.fight.you.team.get(Battle.myIndex).status, 183, 165);
	g.drawString("HP: " + PokeBattle.fight.you.team.get(Battle.myIndex).currentHP + "/" + PokeBattle.fight.you.team.get(Battle.myIndex).maxHP, 233, 165);
	g.setColor(gray);
	g.fillRoundRect(163, 170, 150, 15, 5, 5);
	g.setColor(Color.BLACK);
	g.drawRoundRect(163, 170, 150, 15, 5, 5);
	g.drawString("Exp:", 168, 183);
	g.setColor(blue);
	g.drawRoundRect(198, 173, 110, 10, 5, 5);
	g.fillRoundRect(198, 173, 80, 10, 5, 5);
	g.setColor(Color.BLACK);
	
	//draw opponent's name/health bar
	g.setColor(gray);
	g.fillRoundRect(3, 3, 150, 35, 5, 5);
	g.setColor(Color.BLACK);
	g.drawRoundRect(3, 3, 150, 35, 5, 5);
    g.drawString(PokeBattle.fight.gary.team.get(Battle.enemyIndex).species, 8, 17);
	g.drawString("Lv: " + PokeBattle.fight.gary.team.get(Battle.enemyIndex).level, 110, 17);
	int enemyHealth = (int)((PokeBattle.fight.gary.team.get(Battle.enemyIndex).currentHP * 100) / PokeBattle.fight.gary.team.get(Battle.enemyIndex).maxHP);
	if (enemyHealth > 50) {
	  g.setColor(green);
	}
	else if (enemyHealth > 20) {
	  g.setColor(yellow);
	}
	else {
	  g.setColor(red);
	}
	g.drawRoundRect(43, 23, 100, 10, 5, 5); //opponent's health bar
	g.fillRoundRect(43, 23, enemyHealth, 10, 5, 5);
	g.setColor(Color.black);
	
	//draws the pokemon and the grass
	g.drawImage(grass, 30, 138, 80, 40, this);
	g.drawImage(grass, 190, 55, 80, 40, this);
    g.drawImage(PokeBattle.fight.you.team.get(Battle.myIndex).back, 25, 90, 96, 96, this);
    g.drawImage(PokeBattle.fight.gary.team.get(Battle.enemyIndex).sprite, 180, 10, 96, 96, this);
	
	//draws the Strings
	g.drawString(line1, 310, 35);
	g.drawString(line2, 310, 60);
	g.drawString(line3, 310, 85);
	
	//draws the pokeballs
	g.drawString("You: ", 345, 150);
	g.drawString("Gary: ", 345, 175);
	int x = 385;
	int alive = Battle.numberAlive(PokeBattle.fight.you.team);
	for (int i = 0; i < 6; i++) { //draws the pokeballs for your team
	  if (i < alive) {
	    g.drawImage(pokeball, x, 140, 12, 12, this);
	  }
	  else {
	    g.drawImage(darkball, x, 140, 12, 12, this);
	  }
	  x = x + 15;
	}
	int x2 = 385;
	int alive2 = Battle.numberAlive(PokeBattle.fight.gary.team); 
	for (int k = 0; k < 6; k++) { //draws the pokeballs for opponent's team
	  if (k < alive2) {
	    g.drawImage(pokeball, x2, 165, 12, 12, this);
	  }
	  else {
	    g.drawImage(darkball, x2, 165, 12, 12, this);
	  }
	  x2 = x2 + 15;
	}
  }
}


//--------------------------------------------------------------------------------------------------------

class Pokemon {
  String species;
  int level;
  Type type1;
  Type type2 = null;
  Move move1;
  Move move2 = null;
  Move move3 = null;
  Move move4 = null;
  int maxHP;
  int currentHP;
  Image sprite;
  Image back;
  Image icon;
  String status = "";
  
  /**
  *Pokemon need several more things yet
  *experience points, level up methods, how much experience and EV's defeating them is worth,
  *move sets, evolutions, EVs and IVS, Base stats, battle stats, battle conditions i.e. consfused,
  *growth rate, gender, ability, nature, breeding, egg hatch speed, happiness, egg group,
  *TM and HM compatablity, Pokedex number and data, wild held items, back-view sprites, possibly more
  */ 
  
  //Create a Pokemon with one type
  Pokemon (String species, int level, Type type1, int hp, Move m1, Move m2, Move m3, Move m4, Image sprite, Image back, Image icon) {
    this.species = species;
	this.level = level;
    this.type1 = type1;
    this.maxHP = hp;
    this.currentHP = hp;
    this.move1 = m1;
	this.move2 = m2;
	this.move3 = m3;
	this.move4 = m4;
	this.sprite = sprite;
	this.back = back;
	this.icon = icon;
  }
  
  //Create a Pokemon with two types
  Pokemon (String species, int level, Type type1, Type type2, int hp, Move m1, Move m2, Move m3, Move m4, Image sprite, Image back, Image icon) {
    this.species = species;
	this.level = level;
    this.type1 = type1;
    this.type2 = type2;
    this.maxHP = hp;
    this.currentHP = hp;
    this.move1 = m1;
	this.move2 = m2;
	this.move3 = m3;
	this.move4 = m4;
	this.sprite = sprite;
	this.back = back;
	this.icon = icon;
  }

  public String toString() {
    return this.species;
  }
  
}

//-------------------------------------------------------------------------------------------------------

/*
TypeID's:
Fire = 1
Water = 2
Grass = 3
Electric = 4
Ground = 5
Rock = 6
Steel = 7
Ice = 8
Fighting = 9
Ghost = 10
Psychic = 11
Dark = 12
Dragon = 13
Flying = 14
Bug = 15
Poison = 16
Normal = 17
*/

enum Type{
  FIRE(1, new int[] {3, 7, 8, 15}, new int[] {1, 2, 6, 13}, new int[0]), 
  WATER(2, new int[] {1, 5, 6}, new int[] {2, 3, 13}, new int[0]), 
  GRASS(3, new int[] {2, 5, 6}, new int[] {1, 3, 7, 13, 14, 15, 16}, new int[0]), 
  ELECTRIC(4, new int[] {2, 14}, new int[] {3, 4, 13}, new int[] {5}), 
  GROUND(5, new int[] {1, 4, 6, 7, 16}, new int[] {3, 15}, new int[] {14}), 
  ROCK(6, new int[] {1, 8, 14, 15}, new int[] {5, 7, 9}, new int[0]), 
  STEEL(7, new int[] {6, 8}, new int[] {1, 2, 4, 7}, new int[0]), 
  ICE(8, new int[] {3, 5, 13, 14}, new int[] {1, 2, 7, 8}, new int[0]), 
  FIGHTING(9, new int[] {6, 7, 12, 17}, new int[] {11, 14}, new int[] {10}), 
  GHOST(10, new int[] {10, 11}, new int[] {7, 12}, new int[] {17}), 
  PSYCHIC(11, new int[] {9, 16}, new int[] {7, 11}, new int[] {12}), 
  DARK(12, new int[] {10, 11}, new int[] {7, 9, 12}, new int[0]), 
  DRAGON(13, new int[] {13}, new int[] {7}, new int[0]), 
  FLYING(14, new int[] {3, 9, 15}, new int[] {4, 6, 7}, new int[0]), 
  BUG(15, new int[] {3, 11, 12}, new int[] {1, 7, 9, 10, 14, 16}, new int[0]), 
  POISON(16, new int[] {3}, new int[] {5, 6, 10, 16}, new int[] {7}),
  NORMAL(17, new int[0], new int[] {6, 7}, new int[] {10});
  
  Type(int typeID, int[] superEffective, int[] notVeryEffective, int[] doesNotAffect) {
    this.typeID = typeID;
	this.superEffective = superEffective;
	this.notVeryEffective = notVeryEffective;
	this.doesNotAffect = doesNotAffect;
  }
  
  public boolean isContainedIn(int n, int[] array) {
    for (int i = 0; i < array.length; i++) {
	  if (array[i] == n) {
	    return true;
	  }
	}
	return false;
  }
  
  public double getMultiplier(Type other) { //this type is attacking other type
    if (isContainedIn(other.typeID, superEffective)) {
	  return 2;
	}
	else if (isContainedIn(other.typeID, notVeryEffective)) {
	  return .5;
	}
	else if (isContainedIn(other.typeID, doesNotAffect)) {
	  return 0;
	}
	else {
	  return 1;
	}
  }
  
  public int getTypeID() {
    return typeID;
  }
  
  public int[] getsuperEffective() {
    return superEffective;
  }
  
  public int[] getnotVeryEffective() {
    return notVeryEffective;
  }
  
  public int[] getdoesNotAffect() {
    return doesNotAffect;
  }
  
  
  private int typeID;
  private int[] superEffective;
  private int[] notVeryEffective;
  private int[] doesNotAffect;
}


//--------------------------------------------------------------------------------------------------------

class Battle {
  Player you; 
  Trainer gary;
  static int myIndex = 0; //user's pokemon index
  static int enemyIndex = 0; //enemy's pokemon index
  static int selection; //corresponds to the button the user selected
  static boolean over = false; //signifies that the game has ended
  boolean okay; //signifies whether user has to press ok
  
  Battle(Player you, Trainer opponent) {
    this.you = you;
	this.gary = opponent;
  }
  
  //constructor with no arguments. Defaults to you versus Gary
  Battle() {
    Move bo = new Move("Bonemerang", 100, 25, Type.GROUND,5);
	Move br = new Move("Bone Club", 75, 50, Type.GROUND, 10);
	Move ra = new Move("Rage", 25, 100, Type.NORMAL, 20);
	Move he = new Move("Headbut", 50, 75, Type.NORMAL, 15);
    Pokemon c = new Pokemon("Cubone", 20, Type.GROUND, 75, ra, he, br, bo, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/104.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/104 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/104.gif")));
	Move wa = new Move("Wing Attack", 75, 50, Type.FLYING, 10);
	Move fc = new Move("Fury Cutter", 100, 25, Type.BUG, 5);
	Move as = new Move("Steel Wing", 50, 75, Type.STEEL, 15);
	Move th = new Move("Thief", 25, 100, Type.DARK, 20);
    Pokemon s = new Pokemon("Scyther", 30, Type.BUG, Type.FLYING, 100, th, as, wa, fc, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/123.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/123 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/123.gif")));
	Move co = new Move("Confusion", 50, 75, Type.PSYCHIC, 15);
	Move pb = new Move("Psybeam", 75, 50, Type.PSYCHIC, 10);
	Move ps = new Move("Psychic", 100, 25, Type.PSYCHIC, 5);
	Move th2 = new Move("Thief", 25, 100, Type.DARK, 20);
    Pokemon a = new Pokemon("Alakazam", 40, Type.PSYCHIC, 125, th2, co, pb, ps, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/65.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/65 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/65.gif")));
	Move dr = new Move("Dragon Rage", 50, 75, Type.DRAGON, 15);
	Move hb = new Move("Hyper Beam", 100, 25, Type.NORMAL, 5);
	Move wa2 = new Move("Wing Attack", 75, 50, Type.FLYING, 10);
	Move sl = new Move("Slam", 25, 100, Type.NORMAL, 20);
    Pokemon d = new Pokemon("Dragonite", 50, Type.DRAGON, Type.FLYING, 150, sl, dr, wa2, hb, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/149.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/149 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/149.gif")));
    ArrayList<Pokemon> team1 = new ArrayList<Pokemon>();
    team1.add(c);
    team1.add(s);
    team1.add(a);
    team1.add(d);
	shuffle(team1);
	Move pd = new Move("Pound", 25, 100, Type.NORMAL);
	Move ds = new Move("DoubleSlap", 50, 75, Type.NORMAL);
	Move bs = new Move("Body Slam", 75, 50, Type.NORMAL);
	Move ro = new Move("Rollout", 100, 25, Type.ROCK);
    Pokemon j = new Pokemon("Jigglypuff", 20, Type.NORMAL, 75, pd, ds, bs, ro, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/39.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/39 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/39.gif")));
	Move sb = new Move("Sludge Bomb", 75, 50, Type.POISON);
	Move sm = new Move("Smog", 100, 25, Type.POISON);
	Move hd = new Move("Hidden Power", 50, 75, Type.NORMAL);
	Move ta = new Move("Tackle", 25, 100, Type.NORMAL);
    Pokemon w = new Pokemon("Weezing", 30, Type.POISON, 100, ta, hd, sm, sb, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/110.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/110 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/110.gif")));
	Move hy = new Move("Hydro Pump", 100, 25, Type.WATER);
	Move sk = new Move("Skull Bash", 75, 50, Type.NORMAL);
	Move bt = new Move("Bite", 25, 100, Type.DARK);
	Move sf = new Move("Surf", 50, 75, Type.WATER);
    Pokemon b = new Pokemon("Blastoise", 40, Type.WATER, 125, hy, sk, bt, sf, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/9.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/9 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/9.gif")));
	Move ha = new Move("Horn Attack", 25, 100, Type.NORMAL);
	Move mh = new Move("Megahorn", 50, 75, Type.BUG);
	Move ea = new Move("Earthquake", 100, 25, Type.GROUND);
	Move sb2 = new Move("Sludge Bomb", 75, 50, Type.POISON);
    Pokemon n = new Pokemon("Nidoking", 50, Type.POISON, Type.GROUND, 150, sb2, ha, mh, ea, Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/34.png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/34 (2).png")), Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/34.gif")));
    ArrayList<Pokemon> team2 = new ArrayList<Pokemon>();
    team2.add(j);
    team2.add(w);
    team2.add(b);
    team2.add(n);
	shuffle(team2);
	Random r = new Random();
	int rand = r.nextInt(2);
	if (rand == 0) {
	  this.okay = true;
	  BattlePanel.line2 = "Gary goes first this time.";
	  BattlePanel.line3 = "Press ok to start.";
	}
	else { 
	  this.okay = false;
	  BattlePanel.line2 = "You go first this time.";
	  BattlePanel.line3 = "Select a move to start.";
	}
	this.gary = new Trainer(team2);
	
	ArrayList<Item> pouch = new ArrayList<Item>();
	pouch.add(new Potion(3));
	pouch.add(new SuperPotion(2));
	pouch.add(new MaxPotion(3));
	this.you = new Player(team1, pouch);
  }
  
  //called when it is your turn to attack
  static void userAttack() {
    attack(PokeBattle.fight.you.team.get(Battle.myIndex), PokeBattle.fight.gary.team.get(Battle.enemyIndex), selection);
	BattlePanel.line3 = "Press ok.";
	if (PokeBattle.fight.gary.team.get(Battle.enemyIndex).currentHP <= 0) {
	  if (PokeBattle.fight.gary.team.size() - 1 == Battle.enemyIndex) {
	    over = true;
		BattlePanel.line1 = "The battle is over.";
		BattlePanel.line2 = "You won.";
		BattlePanel.line3 = "You are now a Pokemon Master!";
	  }
	  else {
	    BattlePanel.line2 = PokeBattle.fight.gary.team.get(Battle.enemyIndex).species + " has fainted. Gary sent out " + PokeBattle.fight.gary.team.get(Battle.enemyIndex + 1).species + ".";
	    Battle.enemyIndex++;
	  }
	}
  }
  
  //called when it is the enemy's turn to attack
  static void enemyAttack() {
    Random r = new Random();
	int rand = r.nextInt(4);
	attack(PokeBattle.fight.gary.team.get(Battle.enemyIndex), PokeBattle.fight.you.team.get(Battle.myIndex), rand);
	BattlePanel.line3 = "Pick a move, use an item, or switch Pokemon.";
	if (PokeBattle.fight.you.team.get(Battle.myIndex).currentHP <= 0) {
	  PokeBattle.fight.you.team.get(Battle.myIndex).status = "FNT";
	  if (numberAlive(PokeBattle.fight.you.team) == 0) {
		over = true;
		BattlePanel.line1 = "The battle is over.";
		BattlePanel.line2 = "You lost.";
		BattlePanel.line3 = "Better luck next time!";
	  }
	  else {
		PokeBattle.sDialog = new SwitchDialog(PokeBattle.bFrame, true);
		PokeBattle.sDialog.backButton.setEnabled(false);
		PokeBattle.sDialog.setDefaultCloseOperation(0);
		PokeBattle.sDialog.setVisible(true);
		BattlePanel.line3 = "Your move.";
		
	  }
	}
  }
  
  //attack does the damage calculating
  static void attack(Pokemon a, Pokemon b, int input) {
    Random r = new Random();
	int rand = r.nextInt(100);
	Move m;
	  if (input == 0) {
	    m = a.move1;
	  }
	  else if (input == 1) {
	    m = a.move2;
	  }
	  else if (input == 2) {
	    m = a.move3;
	  }
	  else {
	    m = a.move4;
	  }
	  m.currentPP = m.currentPP - 1;
	  if (m.accuracy > rand) {
	    b.currentHP = b.currentHP - m.power;
		if (b.currentHP < 0) { //makes it impossible to have negative HP
		  b.currentHP = 0;
		}
	    BattlePanel.line1 = a.species + " used " + m.name;
	    BattlePanel.line2 = "It did " + m.power + " damage.";
	  }
	  else {
	    BattlePanel.line1 = a.species + " used " + m.name;
	    BattlePanel.line2 = "It missed!";
	  }
  }
  
  //shuffles the order of the Pokemon in the ArrayList
  //only useful during the testing to keep it from being the same fight every time
  //final version won't need this
  static void shuffle(ArrayList<Pokemon> team) {
    Random r = new Random();
	for (int i = 0; i < team.size(); i++) {
	  int randPoke = r.nextInt(team.size());
	  Pokemon temp = team.get(i);
	  team.set(i, team.get(randPoke));
	  team.set(randPoke, temp);
	}
  }
  
  //returns the number of non-fainted pokemon
  static int numberAlive(ArrayList<Pokemon> team) {
    int ans = 0;
    for (int i = 0; i < team.size(); i++) {
	  if (team.get(i).currentHP == 0) {
	    continue;
	  }
	  else {
	    ans++;
	  }
	}
	return ans;
  }
}



//--------------------------------------------------------------------------------------------------------
class Move{
  String name;
  Type type;
  int power;
  int accuracy;
  int maxPP = 10;
  int currentPP = 10;
  
  /**
  *moves still need:
  *types, effects, and targets ,plus keeping track of how many PP-ups have been used
  */
  
  //creates a new move with default pp of 10
  Move(String name, int power, int accuracy, Type type) {
    this.name = name;
	this.power = power;
	this.accuracy = accuracy;
	this.type = type;
  }
  
  //creates a new move with a set pp
  Move(String name, int power, int accuracy, Type type, int pp) {
    this.name = name;
	this.power = power;
	this.accuracy = accuracy;
	this.type = type;
	this.maxPP = pp;
	this.currentPP = pp;
  }
  
  public String toString() {
    return this.name;
  }
}


//--------------------------------------------------------------------------------------------------------
class Trainer {
  ArrayList<Pokemon> team;
  String name; // example = "Gary";
  String trainerType; // example = "CoolTrainer";
  Image sprite; // sprite of trainer
  int moneyGiven; //example = 500;
  
  
  Trainer(ArrayList<Pokemon> team) {
    this.team = team;
  }
}

class Player extends Trainer {
  ArrayList<Item> bag;
  int money = 0;
  int badges = 0;
  
  Player(ArrayList<Pokemon> team, ArrayList<Item> bag) {
    super(team);
	this.bag = bag;
  }
}



//--------------------------------------------------------------------------------------------------------
/**
*Items will have to be completely overhauled in the final version
*have a generic abstract class item, and have medicines, balls, key items, regular items, and TMs extend those
*then perhaps even extend those further
*/

abstract class Item{
  String name;
  int quantity = 1;
  int hpToHeal;
  
  Item() {
  }
  
  public String toString() {
    return name + " (" + quantity + ")";
  }
  
  void use(Pokemon p) {
    p.currentHP = p.currentHP + hpToHeal;
	if (p.currentHP > p.maxHP) {
	  p.currentHP = p.maxHP;
	}
	quantity = quantity - 1;
  }
}

class SmallPotion extends Item {
  //creates one potion
  SmallPotion() {
    super.name = "Potion";
	super.hpToHeal = 25;
  }
  //creates q potions
  SmallPotion(int q) {
    super.name = "Potion";
	super.hpToHeal = 25;
	super.quantity = q;
  }
}

class SuperPotion extends Item {
  SuperPotion() {
    super.name = "Super Potion";
	super.hpToHeal = 50;
  }
  SuperPotion(int q) {
    super.name = "Super Potion";
	super.hpToHeal = 50;
	super.quantity = q;
  }
}

class MaxPotion extends Item {
  MaxPotion() {
    super.name = "Max Potion";
  }
  MaxPotion(int q) {
    super.name = "Max Potion";
	super.quantity = q;
  }
  void use(Pokemon p) {
    p.currentHP = p.maxHP;
	quantity = quantity - 1;
  }
}



//-------------------------------------------------------

class ItemDialog extends javax.swing.JDialog {

    public ItemDialog(JFrame frame, boolean modal) {
	    super(frame, modal);
        initComponents();
    }

    private void initComponents() {
        setTitle("Use an item.");
        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton("", true);
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        buttonGroup1.add(jRadioButton3);
        buttonGroup1.add(jRadioButton4);
        buttonGroup1.add(jRadioButton5);
        buttonGroup1.add(jRadioButton6);
		
		int partySize = PokeBattle.fight.you.team.size();;
		
		if (partySize == 6) {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jRadioButton2.setIcon(new RadioButtonIcon(jRadioButton2, new ImageIcon(PokeBattle.fight.you.team.get(1).icon)));
          jRadioButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jRadioButton3.setIcon(new RadioButtonIcon(jRadioButton3, new ImageIcon(PokeBattle.fight.you.team.get(2).icon)));
          jRadioButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jRadioButton4.setIcon(new RadioButtonIcon(jRadioButton4, new ImageIcon(PokeBattle.fight.you.team.get(3).icon)));
          jRadioButton5.setText(PokeBattle.fight.you.team.get(4).species + "   HP:" + PokeBattle.fight.you.team.get(4).currentHP + "/" + PokeBattle.fight.you.team.get(4).maxHP + "  " + PokeBattle.fight.you.team.get(4).status);
		  jRadioButton5.setIcon(new RadioButtonIcon(jRadioButton5, new ImageIcon(PokeBattle.fight.you.team.get(4).icon)));
          jRadioButton6.setText(PokeBattle.fight.you.team.get(5).species + "   HP:" + PokeBattle.fight.you.team.get(5).currentHP + "/" + PokeBattle.fight.you.team.get(5).maxHP + "  " + PokeBattle.fight.you.team.get(5).status);
		  jRadioButton6.setIcon(new RadioButtonIcon(jRadioButton6, new ImageIcon(PokeBattle.fight.you.team.get(5).icon)));
		}
		else if (partySize == 5) {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jRadioButton2.setIcon(new RadioButtonIcon(jRadioButton2, new ImageIcon(PokeBattle.fight.you.team.get(1).icon)));
          jRadioButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jRadioButton3.setIcon(new RadioButtonIcon(jRadioButton3, new ImageIcon(PokeBattle.fight.you.team.get(2).icon)));
          jRadioButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jRadioButton4.setIcon(new RadioButtonIcon(jRadioButton4, new ImageIcon(PokeBattle.fight.you.team.get(3).icon)));
          jRadioButton5.setText(PokeBattle.fight.you.team.get(4).species + "   HP:" + PokeBattle.fight.you.team.get(4).currentHP + "/" + PokeBattle.fight.you.team.get(4).maxHP + "  " + PokeBattle.fight.you.team.get(4).status);
		  jRadioButton5.setIcon(new RadioButtonIcon(jRadioButton5, new ImageIcon(PokeBattle.fight.you.team.get(4).icon)));
          jRadioButton6.setText("");
		  jRadioButton6.setEnabled(false);
		}
		else if (partySize == 4) {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jRadioButton2.setIcon(new RadioButtonIcon(jRadioButton2, new ImageIcon(PokeBattle.fight.you.team.get(1).icon)));
          jRadioButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jRadioButton3.setIcon(new RadioButtonIcon(jRadioButton3, new ImageIcon(PokeBattle.fight.you.team.get(2).icon)));
          jRadioButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jRadioButton4.setIcon(new RadioButtonIcon(jRadioButton4, new ImageIcon(PokeBattle.fight.you.team.get(3).icon)));
          jRadioButton5.setText("");
		  jRadioButton5.setEnabled(false);
          jRadioButton6.setText("");
		  jRadioButton6.setEnabled(false);
		}
		else if (partySize == 3) {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jRadioButton2.setIcon(new RadioButtonIcon(jRadioButton2, new ImageIcon(PokeBattle.fight.you.team.get(1).icon)));
          jRadioButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jRadioButton3.setIcon(new RadioButtonIcon(jRadioButton3, new ImageIcon(PokeBattle.fight.you.team.get(2).icon)));
          jRadioButton4.setText("");
		  jRadioButton4.setEnabled(false);
          jRadioButton5.setText("");
		  jRadioButton5.setEnabled(false);
          jRadioButton6.setText("");
		  jRadioButton6.setEnabled(false);
		}
		else if (partySize == 2) {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jRadioButton2.setIcon(new RadioButtonIcon(jRadioButton2, new ImageIcon(PokeBattle.fight.you.team.get(1).icon)));
          jRadioButton3.setText("");
		  jRadioButton3.setEnabled(false);
          jRadioButton4.setText("");
		  jRadioButton4.setEnabled(false);
          jRadioButton5.setText("");
		  jRadioButton5.setEnabled(false);
          jRadioButton6.setText("");
		  jRadioButton6.setEnabled(false);
		}
		else {
          jRadioButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jRadioButton1.setIcon(new RadioButtonIcon(jRadioButton1, new ImageIcon(PokeBattle.fight.you.team.get(0).icon)));
          jRadioButton2.setText("");
		  jRadioButton2.setEnabled(false);
          jRadioButton3.setText("");
		  jRadioButton3.setEnabled(false);
          jRadioButton4.setText("");
		  jRadioButton4.setEnabled(false);
          jRadioButton5.setText("");
		  jRadioButton5.setEnabled(false);
          jRadioButton6.setText("");
		  jRadioButton6.setEnabled(false);
		}






        jTextPane1.setText("Please select an item and a Pokemon to use it on.");
		jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        button1.setLabel("Go!");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    int itemIndex = jList1.getSelectedIndex();
				int pokeIndex;
                if (jRadioButton1.isSelected()) {
				  pokeIndex = 0;
				}
				else if (jRadioButton2.isSelected()) {
				  pokeIndex = 1;
				}
				else if (jRadioButton3.isSelected()) {
				  pokeIndex = 2;
				}
				else if (jRadioButton4.isSelected()) {
				  pokeIndex = 3;
				}
				else if (jRadioButton5.isSelected()) {
				  pokeIndex = 4;
				}
				else {
				  pokeIndex = 5;
				}
				if (PokeBattle.fight.you.team.get(pokeIndex).currentHP == 0) {
				  BattlePanel.setLines("That Pokemon has 0 HP.", "You can't use that item.", "Still your turn.");
				}
				else if (PokeBattle.fight.you.team.get(pokeIndex).currentHP == PokeBattle.fight.you.team.get(pokeIndex).maxHP) {
				  BattlePanel.setLines("That Pokemon has full HP.", "You can't use that item.", "Still your turn.");
				}
				else {
				PokeBattle.fight.you.bag.get(itemIndex).use(PokeBattle.fight.you.team.get(pokeIndex));
				BattlePanel.setLines("You have used an item.", "It probably healed you.", "Press ok to continue.");
				if (PokeBattle.fight.you.bag.get(itemIndex).quantity == 0) {
				  PokeBattle.fight.you.bag.remove(itemIndex);
				}
				PokeBattle.fight.okay = true;
				}
				PokeBattle.iDialog.dispose();
            }
        });

        button2.setLabel("Back");
		button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //PokeBattle.iDialog.setVisible(false);
				PokeBattle.iDialog.dispose();
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
			String[] strings = toArray(PokeBattle.fight.you.bag);
			
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
		jList1.setSelectedIndex(0);
        jScrollPane2.setViewportView(jList1);

        jScrollPane3.setViewportView(jScrollPane2); //not sure why there is a jScrollPane inside another jScrollPane, look into later
		
		
		
		
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton6))
                    .addComponent(jScrollPane3))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton4, jRadioButton5, jRadioButton6});

        pack();
    }

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed
	
	private void button2ActionPerformed(java.awt.event.ActionEvent evt) {
	  
	}
	
	static String[] toArray(ArrayList<Item> list) {
    int size = list.size();
	String[] array = new String[size];
	for (int i = 0; i < size; i++) {
	  array[i] = list.get(i).name + " (" + list.get(i).quantity + ")";
	}
	return array;
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}


//------------------------------------------------------------------------------------------

//Start of SwitchFrame code
class SwitchDialog extends javax.swing.JDialog {

    int chosenPokemon;

    //constructor method
    public SwitchDialog(JFrame frame, boolean modal) {
        super(frame, modal);
		initComponents();
    }

    private void initComponents() {
        setTitle("Select a Pokemon to send out.");
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        switchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		int partySize = PokeBattle.fight.you.team.size();;
		
		if (partySize == 6) {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jButton2.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(1).icon));
          jButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jButton3.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(2).icon));
          jButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(3).icon));
          jButton5.setText(PokeBattle.fight.you.team.get(4).species + "   HP:" + PokeBattle.fight.you.team.get(4).currentHP + "/" + PokeBattle.fight.you.team.get(4).maxHP + "  " + PokeBattle.fight.you.team.get(4).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(4).icon));
          jButton6.setText(PokeBattle.fight.you.team.get(5).species + "   HP:" + PokeBattle.fight.you.team.get(5).currentHP + "/" + PokeBattle.fight.you.team.get(5).maxHP + "  " + PokeBattle.fight.you.team.get(5).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(3).icon));
		}
		else if (partySize == 5) {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jButton2.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(1).icon));
          jButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jButton3.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(2).icon));
          jButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(3).icon));
          jButton5.setText(PokeBattle.fight.you.team.get(4).species + "   HP:" + PokeBattle.fight.you.team.get(4).currentHP + "/" + PokeBattle.fight.you.team.get(4).maxHP + "  " + PokeBattle.fight.you.team.get(4).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(4).icon));
          jButton6.setText("");
		  jButton6.setEnabled(false);
		}
		else if (partySize == 4) {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jButton2.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(1).icon));
          jButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jButton3.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(2).icon));
          jButton4.setText(PokeBattle.fight.you.team.get(3).species + "   HP:" + PokeBattle.fight.you.team.get(3).currentHP + "/" + PokeBattle.fight.you.team.get(3).maxHP + "  " + PokeBattle.fight.you.team.get(3).status);
		  jButton4.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(3).icon));
          jButton5.setText("");
		  jButton5.setEnabled(false);
          jButton6.setText("");
		  jButton6.setEnabled(false);
		}
		else if (partySize == 3) {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jButton2.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(1).icon));
          jButton3.setText(PokeBattle.fight.you.team.get(2).species + "   HP:" + PokeBattle.fight.you.team.get(2).currentHP + "/" + PokeBattle.fight.you.team.get(2).maxHP + "  " + PokeBattle.fight.you.team.get(2).status);
		  jButton3.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(2).icon));
          jButton4.setText("");
		  jButton4.setEnabled(false);
          jButton5.setText("");
		  jButton5.setEnabled(false);
          jButton6.setText("");
		  jButton6.setEnabled(false);
		}
		else if (partySize == 2) {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText(PokeBattle.fight.you.team.get(1).species + "   HP:" + PokeBattle.fight.you.team.get(1).currentHP + "/" + PokeBattle.fight.you.team.get(1).maxHP + "  " + PokeBattle.fight.you.team.get(1).status);
		  jButton2.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(1).icon));
          jButton3.setText("");
		  jButton3.setEnabled(false);
          jButton4.setText("");
		  jButton4.setEnabled(false);
          jButton5.setText("");
		  jButton5.setEnabled(false);
          jButton6.setText("");
		  jButton6.setEnabled(false);
		}
		else {
          jButton1.setText(PokeBattle.fight.you.team.get(0).species + "   HP:" + PokeBattle.fight.you.team.get(0).currentHP + "/" + PokeBattle.fight.you.team.get(0).maxHP + "  " + PokeBattle.fight.you.team.get(0).status);
		  jButton1.setIcon(new ImageIcon(PokeBattle.fight.you.team.get(0).icon));
          jButton2.setText("");
		  jButton2.setEnabled(false);
          jButton3.setText("");
		  jButton3.setEnabled(false);
          jButton4.setText("");
		  jButton4.setEnabled(false);
          jButton5.setText("");
		  jButton5.setEnabled(false);
          jButton6.setText("");
		  jButton6.setEnabled(false);
		}
		
		checkDead(); //defined below, disables the buttons for any fainted Pokemon
		
		jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 0;
				setText(0);
            }
        });
		
		jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 1;
				setText(1);
            }
        });
		
		jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 2;
				setText(2);
            }
        });
		
		jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 3;
				setText(3);
            }
        });
		
		jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 4;
				setText(4);
            }
        });
		
		jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    switchButton.setEnabled(true);
                chosenPokemon = 5;
				setText(5);
            }
        });

        switchButton.setText("Send Out");
		switchButton.setEnabled(false);
		switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
			    BattlePanel.line1 = "You sent out " + PokeBattle.fight.you.team.get(chosenPokemon).species + ".";
				BattlePanel.line2 = "";
				BattlePanel.line3 = "Press ok.";
				PokeBattle.fight.okay = true;
			    Battle.myIndex = chosenPokemon;
                //PokeBattle.sDialog.setVisible(false);
				PokeBattle.sDialog.dispose();
            }
        });

        backButton.setText("Back");
		backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //PokeBattle.sDialog.setVisible(false);   //just hides it
				PokeBattle.sDialog.dispose(); //actually gets rid of the dialog, which is what we want
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
		jTextArea1.setEditable(false);
        jTextArea1.setText("");
        jScrollPane3.setViewportView(jTextArea1);

        jTabbedPane1.addTab("Stats", jScrollPane3);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
		jTextArea2.setEditable(false);
        jTextArea2.setText("");
        jScrollPane4.setViewportView(jTextArea2);

        jTabbedPane1.addTab("Moves", jScrollPane4);
		

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton4)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(backButton)
                        .addGap(18, 18, 18)
                        .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton6});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {switchButton, backButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(7, 7, 7)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addContainerGap(103, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton6});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {switchButton, backButton});

        pack();
    }// </editor-fold>
	
	void setText(int n) {
	  String stats = "Name: " + PokeBattle.fight.you.team.get(n).species + "\nType: " + PokeBattle.fight.you.team.get(n).type1;
      if (PokeBattle.fight.you.team.get(n).type2 != null) {
        stats = stats + "/" + PokeBattle.fight.you.team.get(n).type2;
      }
      stats = stats + "\n Status: ok\n HP: " + PokeBattle.fight.you.team.get(n).currentHP + "/" + PokeBattle.fight.you.team.get(n).maxHP;
	  jTextArea1.setText(stats);
	  //jTextArea1.setText("Name: Cubone\nType: Ground\nStatus: ok\nHP: 45/60\nAttack: 88\nDefence: 100\nSpecial Attack: 45\nSpecial Defense: 60\nSpeed: 67\n\nItem: Quick Claw\n\nExp Points: 10783\nNext Level: 345");
	  //jTextArea2.setText("Headbutt Type:Normal\nPP:12/15 Power:70 Acc:100\nMay cause Flinching\n\nBonemerang Type:Ground\nPP:9/10 Power:100 Acc:90\nNo added effect\n\nHyper Beam Type:Normal\nPP:5/5 Power:150 Acc: 90\nMust recharge next turn\n\nEarthquake Type:Ground\nPP:10/10 Power:100 Acc:100\nNo added effect");
	  String moves = PokeBattle.fight.you.team.get(n).move1.name + "   Type: " + PokeBattle.fight.you.team.get(n).move1.type + "\n";
	  moves = moves + "PP: " + PokeBattle.fight.you.team.get(n).move1.currentPP + "/" + PokeBattle.fight.you.team.get(n).move1.maxPP + "  Power:" + PokeBattle.fight.you.team.get(n).move1.power + "  Acc:" + PokeBattle.fight.you.team.get(n).move1.accuracy + " \n\n";
	  if (PokeBattle.fight.you.team.get(n).move2 != null) {
	  moves = moves + PokeBattle.fight.you.team.get(n).move2.name + "   Type: " + PokeBattle.fight.you.team.get(n).move2.type + "\n";
	  moves = moves + "PP: " + PokeBattle.fight.you.team.get(n).move2.currentPP + "/" + PokeBattle.fight.you.team.get(n).move2.maxPP + "  Power:" + PokeBattle.fight.you.team.get(n).move2.power + "  Acc:" + PokeBattle.fight.you.team.get(n).move2.accuracy + "\n\n";
	  }
	  if (PokeBattle.fight.you.team.get(n).move3 != null) {
	  moves = moves + PokeBattle.fight.you.team.get(n).move3.name + "   Type: " + PokeBattle.fight.you.team.get(n).move3.type + "\n";
	  moves = moves + "PP: " + PokeBattle.fight.you.team.get(n).move3.currentPP + "/" + PokeBattle.fight.you.team.get(n).move3.maxPP + "  Power:" + PokeBattle.fight.you.team.get(n).move3.power + "  Acc:" + PokeBattle.fight.you.team.get(n).move3.accuracy + "\n\n";
      }
	  if (PokeBattle.fight.you.team.get(n).move4 != null) {
	  moves = moves + PokeBattle.fight.you.team.get(n).move4.name + "   Type: " + PokeBattle.fight.you.team.get(n).move4.type + "\n";
	  moves = moves + "PP: " + PokeBattle.fight.you.team.get(n).move4.currentPP + "/" + PokeBattle.fight.you.team.get(n).move4.maxPP + "  Power:" + PokeBattle.fight.you.team.get(n).move4.power + "  Acc:" + PokeBattle.fight.you.team.get(n).move4.accuracy;
      }
	  jTextArea2.setText(moves);
	  
	}
	
	void checkDead() {
	  int num = PokeBattle.fight.you.team.size();
	  if (num == 1) {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }		
	  }
	  else if (num == 2) {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }
        if (PokeBattle.fight.you.team.get(1).currentHP == 0) {
          jButton2.setEnabled(false);
        }			
	  }
	  else if (num == 3) {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }	
        if (PokeBattle.fight.you.team.get(1).currentHP == 0) {
          jButton2.setEnabled(false);
        }	
        if (PokeBattle.fight.you.team.get(2).currentHP == 0) {
          jButton3.setEnabled(false);
        }		
	  }
	  else if (num == 4) {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }
        if (PokeBattle.fight.you.team.get(1).currentHP == 0) {
          jButton2.setEnabled(false);
        }		
		if (PokeBattle.fight.you.team.get(2).currentHP == 0) {
          jButton3.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(3).currentHP == 0) {
          jButton4.setEnabled(false);
        }
	  }
	  else if (num == 5) {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }
        if (PokeBattle.fight.you.team.get(1).currentHP == 0) {
          jButton2.setEnabled(false);
        }		
		if (PokeBattle.fight.you.team.get(2).currentHP == 0) {
          jButton3.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(3).currentHP == 0) {
          jButton4.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(4).currentHP == 0) {
          jButton5.setEnabled(false);
        }
	  }
	  else {
	    if (PokeBattle.fight.you.team.get(0).currentHP == 0) {
          jButton1.setEnabled(false);
        }
        if (PokeBattle.fight.you.team.get(1).currentHP == 0) {
          jButton2.setEnabled(false);
        }		
		if (PokeBattle.fight.you.team.get(2).currentHP == 0) {
          jButton3.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(3).currentHP == 0) {
          jButton4.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(4).currentHP == 0) {
          jButton5.setEnabled(false);
        }
		if (PokeBattle.fight.you.team.get(5).currentHP == 0) {
          jButton6.setEnabled(false);
        }
	  }
	}

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton switchButton;
    javax.swing.JButton backButton;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
	private String statsInfo;
    // End of variables declaration
}



//----------------------------------------------------------------
/**
The following code was graciously posted on the following web addresses:
http://tips4java.wordpress.com/2009/03/25/toggle-button-icons/
http://tips4java.wordpress.com/2009/03/22/dual-icon/

These fix the problem on the item screen where setIcon overwrote the radioButton icon

*/


/**
 * @(#)ToggleButtonIcon.java	1.0 03/18/09
 */
//package darrylbu.renderer;

// import javax.swing.Icon;
// import javax.swing.JToggleButton;

/**
 * The base class for displying an additional custom icon on a JCheckBox or
 * JRadioButton.  Subclasses should furnish the default Icon provided by the
 * Look and Feel using UIManager.getIcon(...).
 * <P>
 * The gap between the icons is always equal to the gap between the button's
 * icon and text.
 * <P>
 * Extends {@link DualIcon}.
 * @version 1.0 03/11/09
 * @author Darryl
 */
abstract class ToggleButtonIcon extends DualIcon {

   /**
    * Creates a <CODE>ToggleButtonIcon</CODE> with the specified horizontal
    * and vertical positioning.
    * 
    * @param button the button
    * @param customIcon the icon
    * @param defaultIcon the default icon for the button
    * @param horizontalPosition the horizontal position of the custom icon
    * relative to the default icon.  One of the following values:
    * <ul>
    * <li>{@code SwingConstants.RIGHT}
    * <li>{@code SwingConstants.LEFT}
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.LEADING}
    * <li>{@code SwingConstants.TRAILING}
    * </ul>
    * LEADING and TRAILING will be interpreted in the context of the button's
    * ComponentOrientation.
    * <P>
    * @param verticalPosition the vertical position of the custom icon
    * relative to the default icon
    * One of the following values:
    * <ul>
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.TOP}
    * <li>{@code SwingConstants.BOTTOM}
    * </ul>
    */
   protected ToggleButtonIcon(JToggleButton button,
         Icon customIcon, Icon defaultIcon,
         int horizontalPosition, int verticalPosition) {
      super(customIcon, defaultIcon,
            getHorizontalPosition(button, horizontalPosition),
            verticalPosition, button.getIconTextGap());
   }

   protected static int getHorizontalPosition(JToggleButton button) {
      return getHorizontalPosition(button, button.getHorizontalTextPosition());
   }

   private static int getHorizontalPosition(JToggleButton button,
         int horizontalPosition) {
      if (button.getComponentOrientation().isLeftToRight()) {
         if (horizontalPosition == LEADING) {
            return LEFT;
         }
         if (horizontalPosition == TRAILING) {
            return RIGHT;
         }
      } else {
         if (horizontalPosition == LEADING) {
            return RIGHT;
         }
         if (horizontalPosition == TRAILING) {
            return LEFT;
         }
      }
      return horizontalPosition;
   }
}



/**
 * @(#)RadioButtonIcon.java	1.0 03/18/09
 */
// package darrylbu.renderer;

// import javax.swing.Icon;
// import javax.swing.JRadioButton;
// import javax.swing.UIManager;

class RadioButtonIcon extends ToggleButtonIcon {

   /**
    * Creates a <CODE>RadioButtonIcon</CODE> for a JRadioButton with the
    * horizontal and vertical positioning derived from the horizontal and
    * vertical positions of the radio button's text relative to its icon.
    * 
    * @param radioButton the radio button
    * @param customIcon the icon
    */
   public RadioButtonIcon(JRadioButton radioButton, Icon customIcon) {
      this(radioButton, customIcon,
            ToggleButtonIcon.getHorizontalPosition(radioButton),
            radioButton.getVerticalTextPosition());
   }

   /**
    * Creates a <CODE>RadioButtonIcon</CODE> for a JRadioButton with the
    * specified horizontal and vertical positioning.
    * 
    * @param radioButton the radio button
    * @param customIcon the icon
    * @param horizontalPosition the horizontal position of the custom icon
    * relative to the default icon.  One of the following values:
    * <ul>
    * <li>{@code SwingConstants.RIGHT}
    * <li>{@code SwingConstants.LEFT}
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.LEADING}
    * <li>{@code SwingConstants.TRAILING}
    * </ul>
    * LEADING and TRAILING will be interpreted in the context of the radio
    * button's ComponentOrientation.
    * <P>
    * @param verticalPosition the vertical position of the custom icon
    * relative to the default icon
    * One of the following values:
    * <ul>
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.TOP}
    * <li>{@code SwingConstants.BOTTOM}
    * </ul>
    */
   public RadioButtonIcon(JRadioButton radioButton, Icon customIcon,
         int horizontalPosition, int verticalPosition) {
      super(radioButton, customIcon, UIManager.getIcon("RadioButton.icon"),
            horizontalPosition, verticalPosition);
   }
}


/**
 * @(#)DualIcon.java	1.0 03/18/09
 */
// package darrylbu.renderer;

// import java.awt.Component;
// import java.awt.Graphics;
// import javax.swing.Icon;
// import javax.swing.SwingConstants;

/**
 * A composite Icon class used to compose two Icon objects into a single Icon
 * by painting the icons in turn at the precomputed offsets.  For example,
 * this class may be used to add a custom icon to a component like JCheckBox
 * or JRadioButton, in addition to the default icon provided by the
 * Look and Feel.
 * 
 * @version 1.0 03/11/09
 * @author Darryl
 */
class DualIcon implements Icon, SwingConstants {

   Icon icon1;
   Icon icon2;
   private int width;
   private int height;
   private int icon1HOffset;
   private int icon1VOffset;
   private int icon2HOffset;
   private int icon2VOffset;
   private int iconIconGap;

   /**
    * Creates a <CODE>DualIcon</CODE> with the specified icons, the default
    * horizontal and vertical positioning and default gap.
    * <CODE>icon2</CODE> is positioned to the right of <CODE>icon1</CODE>
    * with a 4 pixel gap, and the vertical centers of the icons are aligned.
    * 
    * @param icon1 the first icon
    * @param icon2 the second icon
    */
   public DualIcon(Icon icon1, Icon icon2) {
      this(icon1, icon2, RIGHT, CENTER, 4);
   }

   /**
    * Creates a <CODE>DualIcon</CODE> with the specified icons, the specified
    * horizontal and vertical positioning and the specified gap.
    * 
    * @param icon1 the first icon
    * @param icon2 the second icon
    * @param horizontalPosition of the second icon relative to the first.
    * <BR>
    * One of the following values:
    * <ul>
    * <li>{@code SwingConstants.LEFT}
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.RIGHT}
    * </ul>
    * <P>
    * @param verticalPosition of the second icon relative to the first.
    * <BR>
    * One of the following values:
    * <ul>
    * <li>{@code SwingConstants.TOP}
    * <li>{@code SwingConstants.CENTER}
    * <li>{@code SwingConstants.BOTTOM}
    * </ul>
    * <P>
    * @param iconIconGap the gap between the icons in pizels, ignored if the
    * horizontalPosition and verticalPosition are both
    * <CODE>SwingConstants.CENTER</CODE>.
    */
   public DualIcon(Icon icon1, Icon icon2,
         int horizontalPosition, int verticalPosition, int iconIconGap) {
      if (icon1 == null || icon2 == null) {
         throw new NullPointerException("Icons cannot be null");
      }
      horizontalPosition = checkHorizontalKey(horizontalPosition,
            "horizontalPosition");
      verticalPosition = checkVerticalKey(verticalPosition,
            "verticalPosition");

      this.icon1 = icon1;
      this.icon2 = icon2;
      this.iconIconGap = iconIconGap;

      if (horizontalPosition == CENTER) {
         width = Math.max(icon1.getIconWidth(),
               icon2.getIconWidth());
      } else {
         width = icon1.getIconWidth() + iconIconGap +
               icon2.getIconWidth();
      }

      if (verticalPosition == CENTER || horizontalPosition != CENTER) {
         height = Math.max(icon1.getIconHeight(),
               icon2.getIconHeight());
      } else {
         height = icon1.getIconHeight() + iconIconGap +
               icon2.getIconHeight();
      }

      switch (horizontalPosition) {
         case LEFT:
            icon1HOffset = 0;
            icon2HOffset = icon1.getIconWidth() + iconIconGap;
            break;
         case CENTER:
            icon1HOffset = (width - icon1.getIconWidth()) / 2;
            icon2HOffset = (width - icon2.getIconWidth()) / 2;
            break;
         case RIGHT:
            icon1HOffset = icon2.getIconWidth() + iconIconGap;
            icon2HOffset = 0;
            break;
      }

      if (verticalPosition == CENTER) {
         icon1VOffset = (height - icon1.getIconHeight()) / 2;
         icon2VOffset = (height - icon2.getIconHeight()) / 2;
      } else {
         if (horizontalPosition == CENTER) {
            icon1VOffset = verticalPosition == TOP
                  ? 0 : icon2.getIconHeight() + iconIconGap;
            icon2VOffset = verticalPosition == TOP
                  ? icon1.getIconHeight() + iconIconGap : 0;
         } else {
            icon1VOffset = verticalPosition == TOP
                  ? 0 : height - icon1.getIconHeight();
            icon2VOffset = verticalPosition == TOP
                  ? 0 : height - icon2.getIconHeight();
         }
      }
   }

   /**
    * Paints the icons of this compound icon at the specified location
    * with the precomputed offsets.
    * 
    * @param c The component to which the icon is painted, which may be used
    * to get properties useful for painting, e.g. the foreground or background
    * color or selection status.
    * @param g the graphics context
    * @param x the X coordinate of the compound icon's top-left corner
    * @param y the Y coordinate of the compound icon's top-left corner
    */
   @Override
   public void paintIcon(Component c, Graphics g, int x, int y) {
      icon1.paintIcon(c, g,
            x + icon1HOffset, y + icon1VOffset);
      icon2.paintIcon(c, g,
            x + icon2HOffset, y + icon2VOffset);
   }

   /**
    * Gets the width of the bounding rectangle of this
    * <CODE>DualIcon</CODE>.
    * 
    * @return the width in pixels
    */
   @Override
   public int getIconWidth() {
      return width;
   }

   /**
    * Gets the height of the the bounding rectangle of this
    * <CODE>DualIcon</CODE>.
    * 
    * @return the height in pixels
    */
   @Override
   public int getIconHeight() {
      return height;
   }

   private int checkHorizontalKey(int key, String exception) {
      if ((key == LEFT) || (key == CENTER) || (key == RIGHT)) {
         return key;
      } else {
         throw new IllegalArgumentException(exception);
      }
   }

   private int checkVerticalKey(int key, String exception) {
      if ((key == TOP) || (key == CENTER) || (key == BOTTOM)) {
         return key;
      } else {
         throw new IllegalArgumentException(exception);
      }
   }
}